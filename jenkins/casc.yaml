credentials:
  system:
    domainCredentials:
    - credentials:
      - gitHubApp:
          appID: ${readFile:/run/secrets/github-app-id}
          id: "jenkins_github_app"
          privateKey: ${readFile:/run/secrets/github-app-privkey.pem}
      - usernamePassword:
          description: "nexus-credentials"
          id: "nexus-credentials"
          password: ${readFile:/run/secrets/nexus-jenkins-user-password}
          scope: GLOBAL
          username: ${readFile:/run/secrets/nexus-jenkins-user-id}
      - string:
          id: "generic_webhook_token"
          scope: GLOBAL
          secret: ${readFile:/run/secrets/generic-webhook-token}
jenkins:
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "USER:Overall/Administer:admin"
        - "GROUP:Overall/Read:authenticated"
  disableRememberMe: false
  numExecutors: 2
  quietPeriod: 5
  remotingSecurity:
    enabled: true
  scmCheckoutRetryCount: 0
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
      - id: "admin"
        name: "Administrator"
        password: "admin"
        properties:
          - mailer:
              emailAddress: "iresh@n-able.biz"
security:
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false
unclassified:
  location:
    adminAddress: "address not configured yet <nobody@nowhere>"
    url: "http://jenkins:8080/"
  gitHubPluginConfig:
    configs:
    - name: "GitHub"
      apiUrl: "https://api.github.com"
  globalConfigFiles:
    configs:
    - mavenSettings:
        comment: "User settings"
        id: "maven3-settings"
        isReplaceAll: true
        name: "Maven3Settings"
        providerId: "org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig"
        serverCredentialMappings:
        - credentialsId: "nexus-credentials"
          serverId: "nexus"
        content: |
            <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                  https://maven.apache.org/xsd/settings-1.0.0.xsd">
                 <mirrors>
                      <mirror>
                           <id>maven-default-http-blocker</id>
                           <mirrorOf>dummy</mirrorOf>
                           <name>Dummy mirror to override default blocking mirror that blocks http</name>
                           <url>http://0.0.0.0/</url>
                           <blocked>true</blocked>
                     </mirror>
                </mirrors>
            </settings>
  globalLibraries:
    libraries:
    - defaultVersion: "master"
      implicit: true
      name: "build_lib"
      retriever:
        modernSCM:
          scm:
            github:
              configuredByUrl: true
              credentialsId: "jenkins_github_app"
              repoOwner: "nable-integration-cicd-dev-mirror"
              repository: "JenkinsLibs"
              repositoryUrl: "https://github.com/nable-integration-cicd-dev-mirror/JenkinsLibs.git"
              traits:
              - gitHubBranchDiscovery:
                  strategyId: 1
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  maven:
    installations:
    - name: "maven3"
      properties:
      - installSource:
          installers:
          - maven:
              id: "3.8.6"
  mavenGlobalConfig:
    globalSettingsProvider: "standard"
    settingsProvider: "standard"
jobs:
  - script: |
      def github_project_url = 'https://github.com/nable-integration-cicd-dev-mirror/JenkinsJobDSL.git'
      pipelineJob('JobCreator') {
        properties {
          githubProjectUrl(github_project_url)
          parameters {
            pipelineTriggers {
              triggers {
                GenericTrigger {
                  genericVariables {
                    genericVariable {
                      key('repository_full_name')
                      value('$.repository.full_name')
                      expressionType('JSONPath')
                    }
                    genericVariable {
                      key('repository_clone_url')
                      value('$.repository.clone_url')
                      expressionType('JSONPath')
                    }
                    genericVariable {
                      key('job_name')
                      value('$.repository.name')
                      expressionType('JSONPath')
                    }
                    genericVariable {
                      key('action')
                      value('$.action')
                      expressionType('JSONPath')
                    }
                  }
                  genericHeaderVariables {
                    genericHeaderVariable {
                      key('x-github-event')
                      regexpFilter('')
                    }
                  }
                  causeString('Github Repository Created')
                  regexpFilterExpression('repository:created')
                  regexpFilterText('$x_github_event:$action')
                  tokenCredentialId('generic_webhook_token')
                }
              }
            }
          }
        }
        definition {
          cpsScm {
            lightweight(true)
            scm {
              git {
                remote {
                  url(github_project_url)
                  credentials('jenkins_github_app')
                }
                branch('*/master')
              }
            }
            scriptPath('Jenkinsfile')
          }
        }
      }
